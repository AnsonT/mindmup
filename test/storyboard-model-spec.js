/*global describe, it, MM, expect, beforeEach, jasmine, MAPJS, observable, spyOn*/
describe('Storyboards', function () {
	'use strict';
	var activeContent, mapController, activeContentListener;
	beforeEach(function () {
		activeContent = MAPJS.content({
			title: 'root',
			id: 1,
			ideas: {
				1: {id: 11, title: 'not in any storyboards'},
			    2: {id: 12, title: 'already in ted storyboard', attr: {'test-scenes': [{storyboards: {'ted talk': 1}}]}},
			    3: {id: 14, title: 'only in bed storyboard', attr: {'test-scenes': [{storyboards: {'ted talk': 10}}]}},
				4: {id: 13, title: 'in two storyboards', attr: {'test-scenes': [{storyboards: {'ted talk': 2, 'bed talk': 1}}]}}
			}
		});
		mapController = observable({});
		activeContentListener = new MM.ActiveContentListener(mapController);

	});

	describe('StoryboardRepository', function () {
		var underTest;
		beforeEach(function () {
			underTest = new MM.StoryboardRepository(activeContentListener, 'test-storyboards');
			mapController.dispatchEvent('mapLoaded', 'loadedMapid', activeContent);
		});
		describe('getActiveStoryboardName', function () {
			it('should return undefined if no storyboards are defined', function () {
				expect(underTest.getActiveStoryboardName()).toBeUndefined();
			});
			it('should return the first storyboard name by default', function () {
				activeContent.updateAttr(1, 'test-storyboards', ['mickey mouse', 'donald duck']);
				expect(underTest.getActiveStoryboardName()).toEqual('mickey mouse');
			});
		});
		describe('createStoryboard', function () {
			it('should add the new storyboard name to the list of storyboards', function () {
				underTest.createStoryboard();
				expect(activeContent.getAttrById(1, 'test-storyboards')).toEqual(['Storyboard 1']);
			});
			it('should return the new storyboard name', function () {
				expect(underTest.createStoryboard()).toEqual('Storyboard 1');
			});
			it('should make the new storyboard active', function () {
				activeContent.updateAttr(1, 'test-storyboards', ['mickey mouse', 'donald duck']);
				underTest.createStoryboard();
				expect(underTest.getActiveStoryboardName()).toEqual('Storyboard 3');
			});
			it('should name the new storyboard Story Board X, incrementing the counter', function () {
				activeContent.updateAttr(1, 'test-storyboards', ['mickey mouse', 'donald duck']);
				var first = underTest.createStoryboard(),
					second = underTest.createStoryboard();
				expect(first).toBe('Storyboard 3');
				expect(second).toBe('Storyboard 4');
			});
			it('should skip over any counters in the same format as autogenerated, to avoid conflicts', function () {
				activeContent.updateAttr(1, 'test-storyboards', ['Storyboard 5', 'donald duck']);
				expect(underTest.createStoryboard()).toBe('Storyboard 6');
			});
		});
		describe('setActiveStoryboardName', function () {
			it('should change the active storyboard', function () {

			});
			it('dispatches an event to widgets', function () {

			});
		});


		describe('getStoryboards', function () {
			it('should return a list of storyboard names', function () {});
		});
		describe('removeStoryboard', function () {
			it('should remove the new storyboard from the list of storyboards', function () {});
			it('should remove clean all nodes that were scenes in a storyboard', function () {});

		});
		describe('renameStoryboard', function () {
			it('should change the storyboard name in the list of storyboards', function () {});
		});
		describe('cloneStoryboard', function () {
			it('should create a storyboard with a the same scenes as the cloned storyboard', function () {
			});
		});
		describe('getStoryBoard', function () {
			it('should return a storyboard matching the supplied name', function () {
				/*
				It is still not clear what a "storyboard" is
				- a list of scenes?
				- a map (containing a list of scenes)?
				- an object that encapsulates behaviour?
				*/
			});
		});
		describe('when a new map is loaded', function () {

		});
	});

	describe('StoryBoardAdapter', function () {
		var underTest;
		beforeEach(function () {
			underTest = new MM.StoryboardAdapter(activeContent, 'test-scenes');
		});
		describe('nextSceneIndex', function () {
			it('returns 1 for non existent storyboards', function () {
				expect(underTest.nextSceneIndex('red talk')).toBe(1);
			});
			it('returns max index + 1 for non empty storyboards', function () {
				expect(underTest.nextSceneIndex('ted talk')).toBe(11);
				expect(underTest.nextSceneIndex('bed talk')).toBe(2);
			});
		});
		describe('getScenesForNodeId', function () {
			it('retrieves the value of the scenes attr', function () {
				expect(underTest.getScenesForNodeId(11)).toEqual([]);
				expect(underTest.getScenesForNodeId(12)).toEqual([{storyboards: {'ted talk': 1}}]);
				expect(underTest.getScenesForNodeId(13)).toEqual([{storyboards: {'ted talk': 2, 'bed talk': 1}}]);
			});
		});
		describe('setScenesForNodeId', function () {
			it('sets the value of the scenes attr', function () {
				underTest.setScenesForNodeId(12, [{storyboards: {'xed talk': 5}}]);
				expect(activeContent.getAttrById(12, 'test-scenes')).toEqual([{storyboards: {'xed talk': 5}}]);
			});
		});
		describe('insertionIndexAfter', function () {
			it('calculates the arithmetic median if the index is not the last in the list', function () {
				expect(underTest.insertionIndexAfter('ted talk', 1)).toBe(1.5);
				expect(underTest.insertionIndexAfter('ted talk', 2)).toBe(6);
			});
			it('adds 1 to the max index if the argument is the last in the list', function () {
				expect(underTest.insertionIndexAfter('ted talk', 10)).toBe(11);
			});
			it('returns false if the index is not in the list', function () {
				expect(underTest.insertionIndexAfter('ted talk', 11)).toBeFalsy();
			});
		});
		describe('getScenesForStoryboard', function () {
			it('retrieves a list of scenes for the specified storyboard', function () {
				expect(underTest.getScenes('ted talk')).toEqual([
					{ideaId: 12, title: 'already in ted storyboard', index: 1},
					{ideaId: 13, title: 'in two storyboards', index: 2},
					{ideaId: 14, title: 'only in bed storyboard', index: 10}
				]);
			});
			it('returns an empty array for a non existing story board', function () {
				expect(underTest.getScenes('xed talk')).toEqual([]);
			});
		});
	});
	describe('StoryboardModel', function () {
		var underTest, repository;
		beforeEach(function () {
			repository = new jasmine.createSpyObj('repository', ['getActiveStoryboardName', 'createStoryboard']);
			underTest = new MM.StoryboardModel(repository, activeContentListener, 'test-scenes');
			spyOn(activeContent, 'updateAttr').and.callThrough();
		});
		describe('when active content is not loaded', function () {
			it('addScene should return false', function () {
				expect(underTest.addScene(1)).toBeFalsy();
			});
			it('getScenes should return empty array', function () {
				expect(underTest.getScenes()).toEqual([]);
			});
		});
		describe('when activeContent has been loaded', function () {
			beforeEach(function () {
				mapController.dispatchEvent('mapLoaded', 'loadedMapid', activeContent);
			});

			describe('addScene', function () {
				describe('when no story boards exist', function () {
					beforeEach(function () {
						repository.getActiveStoryboardName.and.returnValue(undefined);
						repository.createStoryboard.and.returnValue('newname');
						underTest.addScene(12);
					});
					it('should create a default story board if no story boards exist for the map', function () {
						expect(repository.createStoryboard).toHaveBeenCalled();
					});
					it('should add a scene to an empty storyboard as the first scene', function () {
						expect(activeContent.updateAttr).toHaveBeenCalledWith(12, 'test-scenes', [{storyboards: {newname: 1}}]);
					});
				});
				describe('when the active storyboard exists but is blank', function () {
					beforeEach(function () {
						repository.getActiveStoryboardName.and.returnValue('red talk');
					});
					it('should not try to create a new storyboard', function () {
						underTest.addScene(11);
						expect(repository.createStoryboard).not.toHaveBeenCalled();
					});
					it('should add a scene to the end of a storyboard if storyboard is currently empty', function () {
						underTest.addScene(11);
						expect(activeContent.updateAttr).toHaveBeenCalledWith(11, 'test-scenes', [{storyboards: {'red talk': 1}}]);
					});
					it('should keep any other scenes for other storyboards intact', function () {
						underTest.addScene(12);
						expect(activeContent.updateAttr).toHaveBeenCalledWith(12, 'test-scenes', [
							{storyboards: {'ted talk': 1}},
							{storyboards: {'red talk': 1}}
						]);
					});
				});
				describe('when the active storyboard exists but is not blank', function () {
					beforeEach(function () {
						repository.getActiveStoryboardName.and.returnValue('ted talk');
					});
					it('should not try to create a new storyboard', function () {
						underTest.addScene(11);
						expect(repository.createStoryboard).not.toHaveBeenCalled();
					});
					it('should add a scene to the end if no active scenes', function () {
						underTest.addScene(11);
						expect(activeContent.updateAttr).toHaveBeenCalledWith(11, 'test-scenes', [{storyboards: {'ted talk': 11}}]);
					});
					it('should add a scene after the last activated scene', function () {
						underTest.activateSceneAtIndex(1);
						underTest.activateSceneAtIndex(2);
						underTest.addScene(11);
						expect(activeContent.updateAttr).toHaveBeenCalledWith(11, 'test-scenes', [{storyboards: {'ted talk': 6}}]);
					});
					it('should insert the scene after the optional specified index', function () {
						underTest.addScene(11, 2);
						expect(activeContent.updateAttr).toHaveBeenCalledWith(11, 'test-scenes', [{storyboards: {'ted talk': 6}}]);
					});
					it('should keep any other scenes for other storyboards intact', function () {
						underTest.addScene(12);
						expect(activeContent.updateAttr).toHaveBeenCalledWith(12, 'test-scenes', [
							{storyboards: {'ted talk': 1}},
							{storyboards: {'ted talk': 11}}
						]);
					});
				});
			});
			describe('getScenes', function () {
				beforeEach(function () {
					repository.getActiveStoryboardName.and.returnValue('ted talk');
				});
				it('retrieves a list of scenes for the currently active storyboard', function () {
					expect(underTest.getScenes()).toEqual([
						{ideaId: 12, title: 'already in ted storyboard', index: 1},
						{ideaId: 13, title: 'in two storyboards', index: 2},
						{ideaId: 14, title: 'only in bed storyboard', index: 10}
					]);
				});
			});
			describe('moveAfter', function () {
				it('should move the activated scenes scene after the specified scene ', function () {});
				it('should move the activated scenes before the first scene if no scene is specified', function () {

				});
				it('should move a set of activated to the front even if first scene is activated and no argument is specified', function () {

				});
				it('should move a set of activated scenes after a scene even if moving after an activated one', function () {

				});
				it('preserves the order of activated scenes when moving a whole set', function () {

				});
				describe('when scenes effectively stay in the same position', function () {
					it('does not change the numerical index when moving scene after itself', function () {

					});
					it('does not change the numerical index when moving the first scene to the start', function () {

					});
					it('does not change the numerical index when moving the last scene to the end', function () {

					});
				});
			});
			describe('remove', function () {
				describe('if no args given', function () {
					it('should remove all activated scenes', function () {

					});
					it('should not do anything if no activated scenes', function () {

					});
				});
				describe('when arg is given', function () {
					it('should remove only the specified scene', function () {

					});
					it('should not change the activated scene list', function () {

					});
				});
			});
			describe('activateSceneAtIndex', function () {
				var listener;
				beforeEach(function () {
					repository.getActiveStoryboardName.and.returnValue('ted talk');
					listener = jasmine.createSpy('activeScenesChanged');
					underTest.addEventListener('activeScenesChanged', listener);
				});
				it('should activate a single scene if nothing else is active', function () {
					underTest.activateSceneAtIndex(1);
					expect(underTest.getActiveIndexes()).toEqual([1]);
				});
				it('should not do anything if scene is already active', function () {
					underTest.activateSceneAtIndex(1);
					underTest.activateSceneAtIndex(1);
					expect(underTest.getActiveIndexes()).toEqual([1]);
				});
				it('should add the scene to the list of activated scenes if deactivateOthers is not specified', function () {
					underTest.activateSceneAtIndex(1);
					underTest.activateSceneAtIndex(2);
					expect(underTest.getActiveIndexes()).toEqual([1, 2]);
				});
				it('should add the scene to the list of activated scenes if deactivateOthers is false', function () {
					underTest.activateSceneAtIndex(1);
					underTest.activateSceneAtIndex(2, false);
					expect(underTest.getActiveIndexes()).toEqual([1, 2]);
				});
				it('should deactivate all activated scenes and activate the specified scene if deactivateOthers is true', function () {
					underTest.activateSceneAtIndex(1);
					underTest.activateSceneAtIndex(2, true);
					expect(underTest.getActiveIndexes()).toEqual([2]);
				});
				it('should ignore previous activation - even if current index is active - when deactivateOthers is true', function () {
					underTest.activateSceneAtIndex(1);
					underTest.activateSceneAtIndex(2, false);
					underTest.activateSceneAtIndex(2, true);
					expect(underTest.getActiveIndexes()).toEqual([2]);
				});
				it('dispatches an event if activation changed', function () {
					underTest.activateSceneAtIndex(1);
					expect(listener).toHaveBeenCalledWith([1]);
				});
				it('sends all active indexes, not just the change, when activation changes', function () {
					underTest.activateSceneAtIndex(1);
					listener.calls.reset();
					underTest.activateSceneAtIndex(2);

					expect(listener).toHaveBeenCalledWith([1, 2]);
				});
				it('sends a detached clone to avoid internal changes', function () {
					underTest.activateSceneAtIndex(1);
					listener.calls.reset();
					underTest.activateSceneAtIndex(2);
					listener.calls.mostRecent().args[0].push(22);
					expect(underTest.getActiveIndexes()).toEqual([1, 2]);
				});
				it('does not dispatch an event when activation does not change', function () {
					underTest.activateSceneAtIndex(1);
					underTest.activateSceneAtIndex(2);
					listener.calls.reset();

					underTest.activateSceneAtIndex(1);
					expect(listener).not.toHaveBeenCalled();
				});
			});
			describe('deactivateScene', function () {
				it('should deactivate the scpecified scene', function () {

				});
			});
			describe('getActiveIndexes', function () {
				it('should return empty array when no scene is active', function () {
					expect(underTest.getActiveIndexes()).toEqual([]);
				});
				it('should return a detached clone of the array to prevent internal changes', function () {
					underTest.activateSceneAtIndex(1);
					underTest.getActiveIndexes().push(23);
					expect(underTest.getActiveIndexes()).toEqual([1]);
				});
			});
			describe('should reorganise the scene if the scene index precision is more than 8 significant figures', function () {
				it('when a scene is added', function () {});
				it('when a scene is moved', function () {});
				it('when a scene is inserted', function () {});
			});
			describe('when there are listeners', function () {
				describe('should reflect changes made to the map', function () {
					describe('should remove scenes related to a node when it is deleted', function () {

					});
					describe('should fire scene-added when a scene is added through active content', function () {

					});
					describe('should fire scene-removed when a scene is removed through active content', function () {

					});
					describe('should react to the active storyboard being renamed', function () {
						// also fire an event for widgets!
					});
				});
			});
			describe('when there are no listeners', function () {
				describe('should ignore changes to the map', function () {

				});
			});
			describe('should react to the loaded map being changed', function () {
				it('activates the first story board if there are any', function () {

				});
				it('removes the active storyboard if previous map had story boards and new map does not', function () {

				});
			});
		});

	});
});
